external[-1,"Debt_GDP"]
external[10,"Debt_GDP"]
external[11,"Debt_GDP"]
nrow(external[,"Debt_GDP"])
nrow(external[100,"Debt_GDP"])
nrow(external[15,"Debt_GDP"])
nrow(external[tail(),"Debt_GDP"])
nrow(external[tail(extrenal),"Debt_GDP"])
nrow(external[tail(external),"Debt_GDP"])
external[length(external),"Debt_GDP"]
length(external)
length(external$Debt_GDP)
external[63,"Debt_GDP"]
external[length(external$Debt_GDP),"Debt_GDP"]
shapefile <- reactive({tigris::counties(state = input$selected_state, class = "sf")})
shape_join <- reactive({
join <- geo_join(shapefile(), newdf(), by = "COUNTYFP", "STATEFP")
return(join)
})
factpal <- colorFactor(c("#FF4C4C", "#E9E946"), shape_join()$community_type)
renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = shape_join(),
fillColor = ~factpal(community_type),
color = "grey",
layerId = ~COUNTYNS)
})
observe({
event <- input$map_shape_click
output$cnty <- renderText(shape_join()$NAMELSAD[shape_join()$COUNTYNS == event$id])
})
shapefile <- reactive({tigris::counties(state = input$selected_state, class = "sf")})
shape_join <- reactive({
join <- geo_join(shapefile(), newdf(), by = "COUNTYFP", "STATEFP")
return(join)
})
factpal <- colorFactor(c("#FF4C4C", "#E9E946"), shape_join()$community_type)
renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = shape_join(),
fillColor = ~factpal(community_type),
color = "grey",
layerId = ~COUNTYNS)
})
observe({
event <- input$map_shape_click
output$cnty <- renderText(shape_join()$NAMELSAD[shape_join()$COUNTYNS == event$id])
})
final.merged.rural[1]
final.merged.rural <- read.csv("final.merged.rural.csv")
final.merged.rural <- read.csv("final.merged.rural.csv")
final.merged.rural[1]
final.merged.rural["county"]
final.merged.rural$county"
s
)
final.merged.rural$county
final.merged.rural["county"]
final.merged.rural[,"county"]
library(shiny)
library(ggplot2)
library(dplyr)
library(flexdashboard)
library(tools)
library(plotly)
library(scales)
library(reshape)
library(tidyverse)
library(leaflet)
library(rgdal)    # for readOGR and others
library(sp)       # for spatial objects
library(tigris)
library(tigris)
library(tigris)
runApp('D:/Spring_2021/RShiny/Final/Final_ckallaya/Final_ckallaya.R')
runApp('D:/Spring_2021/RShiny/usfs/usfs/RShiny_6.38_ForestDependent.R')
install.packages("tigris")
library(tigris)
library(tigris)
options(tigris_use_cache = TRUE)
library(tigris)
install.packages("tiger")
library(tigris)
url = 'https://opendata.arcgis.com/datasets/170b764c52f34c9497720c0463f3b58b_9.zip'
tmp = tempfile()
download.file(url, tmp)
unzip(tmp, exdir = tempdir())
# read spatial data using either readOGR or st_read
x = sf::st_read(dsn = tempdir(), layer = '2016_Traffic_Flow_Counts')
url = 'https://opendata.arcgis.com/datasets/170b764c52f34c9497720c0463f3b58b_9.zip'
tmp = tempfile()
download.file(url, tmp)
unzip(tmp, exdir = tempdir())
# read spatial data using either readOGR or st_read
x = sf::st_read(dsn = tempdir(), layer = '2016_Traffic_Flow_Counts')
{
"type": "Feature",
"geometry": {
"type": "Point",
"coordinates": [-122.387250, 47.669827]
},
"properties": {
"name": "Home"
}
}
x
url = 'https://opendata.arcgis.com/datasets/170b764c52f34c9497720c0463f3b58b_9.geojson'
x = sf::st_read(url)
x
Sys.setenv(CENSUS_KEY="815f420d7978fe1866f81df31947126f9e1cc460")
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("815f420d7978fe1866f81df31947126f9e1cc460")
Sys.setenv(CENSUS_KEY="815f420d7978fe1866f81df31947126f9e1cc460")
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
library(censusapi)
install.packages("censusapi")
library(censusapi)
apis <- listCensusApis()
View(apis)
census <- readOGR("https://api.census.gov/data/2010/acs/acs5")
Library (GDAL)
library (GDAL)
install.packages(GDAL"")
install.packages("GDAL")
library (GDAL)
library(rgdal)
census <- readOGR("https://api.census.gov/data/2010/acs/acs5")
library(rgdal)
census <- readOGR("https://api.census.gov/data/2010/acs/acs5")
census <- getCensus(
name = "acs/acs5",
#vars = c("NAME", "PCTUI_PT", "IPR_DESC", "AGE_DESC", "RACECAT", "RACE_DESC"),
region = "county:*",
time = input$selected_vintage)
head(census)
getCensus(
name = "acs/acs5",
#vars = c("NAME", "PCTUI_PT", "IPR_DESC", "AGE_DESC", "RACECAT", "RACE_DESC"),
region = "county:*",
time = input$selected_vintage)
census <- getCensus(
name = "acs/acs5",
vars = c("NAME"),
region = "county:*",
time = input$selected_vintage)
head(census)
getCensus(
name = "acs/acs5",
vars = c("NAME"),
region = "county:*",
time = input$selected_vintage)
census <- getCensus(
name = "acs/acs5",
vars = "NAME",
region = "county:*",
time = 2018)
head(census)
getCensus(
name = "acs/acs5",
vars = "NAME",
region = "county:*",
time = 2018)
sahie_states <- getCensus(
name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "state:*",
time = 2018)
head(sahie_states)
census <- getCensus(
name = "acs/acs5",
vars = "B23025_005E",
region = "county:*",
time = 2018)
head(census)
getCensus(
name = "acs/acs5",
vars = "B23025_005E",
region = "county:*",
time = 2018)
listCensusApis()
getCensus(name = "acs/acs5/subject",
vintage = 2016,
vars = "group(S1902)",
region = "state:26")\
getCensus(name = "acs/acs5/subject",
vintage = 2016,
vars = "group(S1902)",
region = "state:26")
sahie_states <- getCensus(
name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "state:*",
time = 2017)
head(sahie_states)
census <- getCensus(
name = "https://api.census.gov/data/2011/acs/acs5",
vars = "B23025_005E",
region = "county:*",
time = 2018)
head(census)
getCensus(
name = "acs/acs5",
vars = "B23025_005E",
region = "county:*",
time = 2018)
getCensus(
name = "acs/acs5/variables",
vars = "B23025_005E",
region = "county:*",
time = 2018)
getCensus(
name = "acs/acs5",
vars = c("B01001_001E", "NAME", "B01002_001E", "B19013_001E"),
region = "county:*",
time = 2017)
acs_group <- getCensus(name = "acs/acs5",
vintage = 2017,
vars = c("NAME", "group(B19013)"),
region = "county:*")
head(acs_group)
acs_group <- getCensus(name = "acs/acs5",
vintage = 2017,
vars = c("NAME", "B23025_005E"),
region = "county:*")
head(acs_group)
acs <- getCensus(name = "acs/acs5",
vintage = 2018,
vars = c("NAME", "B01001_001E", "B23025_005E", "B19052_002E", ),
region = "county:*")
acs <- getCensus(name = "acs/acs5",
vintage = 2018,
vars = c("NAME", "B01001_001E", "B23025_005E", "B19052_002E"),
region = "county:*")
acs
View(acs)
# Accessing Census API's
acs <- reactive({getCensus(name = "acs/acs5",
vintage = input$selected_vintage,
vars = input$selected_vars,
region = "county:*")
})
# fcd_acs <- reactive({inner_join(newdf(),acs(), by = c("STATEFP" = "state"))})
acs <- reactive({getCensus(name = "acs/acs5",
vintage = input$selected_vintage,
vars = input$selected_vars,
region = "county:*")
})
getCensus(name = "acs/acs5",
vintage = input$selected_vintage,
vars = input$selected_vars,
region = "county:*"
)
library(shiny); runApp('D:/Spring_2021/RShiny/HW1/hw1-ckallaya/hw1-ckallaya.R')
runApp('D:/Spring_2021/RShiny/HW1/hw1-ckallaya/hw1-ckallaya.R')
install.packages(rgeos)
install.packages("rgeos")
trueCentroids = gCentroid(sids,byid=TRUE)
plot(sids)
points(coordinates(sids),pch=1)
points(trueCentroids,pch=2)
trueCentroids = gCentroid(sids,byid=TRUE)
library(rgeos)
library(rgeos)
trueCentroids = gCentroid(sids,byid=TRUE)
install.packages("GISTools")
library(GISTools)
library(GISTools)
sids <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
class(sids)
plot(sids)
shapefile
points(coordinates(sids),pch=1)
points(trueCentroids,pch=2)
pa <- tigris::counties(state = "PA", class = "sf")
class(pa)
class(pa)[1]
readShapePoly(system.file(pa[1], package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
pa
pa[1]
readShapePoly(system.file(pa[1], package="maptools")[1], proj4string=CRS("+proj=longlat +ellps=clrk66"))
pa <- tigris::counties(state = "PA", class = "sf")
class(pa[1])
class(pa[1])
class(pa[,1])
class(pa[1,])
pa["sf"]
View(pa)
pa <- tigris::counties(state = "PA", class = "sf")
class(pa)
readOGR(system.file(pa, package="maptools")[1], proj4string=CRS("+proj=longlat +ellps=clrk66"))
library(rgeos)
library(rgeos)
readOGR(system.file(pa, package="maptools")[1], proj4string=CRS("+proj=longlat +ellps=clrk66"))
readOGR(system.file(pa)
)
sf::read_sf(system.file(pa, package="maptools")[1], proj4string=CRS("+proj=longlat +ellps=clrk66"))
pa
readShapePoly(pa, proj4string=CRS("+proj=longlat +ellps=clrk66"))
plot(pa)
writeSpatialShape(pa, "sids")
points(coordinates(pa),pch=1)
install.packages("GISTools")
library(GISTools)
sids <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
class(sids)
plot(sids)
install.packages("GISTools")
cents <- SpatialPointsDataFrame(coords=cents, data=pa@data, proj4string=CRS("+proj=longlat +ellps=clrk66"))
pa <- tigris::counties(state = input$selected_state, class = "sf")
class(pa)
plot(pa)
cents <- coordinates(pa)
pa["COUNTYFP"]
cents <- coordinates(pa["COUNTYFP"])
writeSpatialShape(pa, "pa")
library(maptools)
writeSpatialShape(pa, "pa")
sf::st_write(pa, "pa")
sf::st_write(pa, "pa", tmpfl)
sf::st_write(pa, "pa", guess_driver_can_write(dsn))
rgdal::writeOGR(pa, "pa")
rgdal::writeOGR(map, ".", "pa", driver="ESRI Shapefile")
rgdal::writeOGR(pa, ".", "pa", driver="ESRI Shapefile")
rgdal::writeOGR(pa, "pa", driver="ESRI Shapefile")
pa <- tigris::counties(state = input$selected_state, class = "sf")
rgdal::writeOGR(pa, "pa", driver="GeoJSON")
pa <- tigris::counties(state = "PA", class = "sf")
rgdal::writeOGR(pa, "pa", driver="ESRI Shapefile")
rgdal::writeOGR(pa, "pa", driver="GeoJSON")
pa <- tigris::counties(state = "PA", class = "sf")
library(shiny)
library(ggplot2)
library(dplyr)
library(flexdashboard)
library(tools)
library(plotly)
library(scales)
library(reshape)
library(tidyverse)
library(leaflet)
library(rgdal)    # for readOGR and others
library(sp)       # for spatial objects
library(tigris)
library(censusapi)
library(rgeos)
library(GISTools)
library(maptools)
options(tigris_use_cache = TRUE)
pa <- tigris::counties(state = "PA", class = "sf")
class(pa)
plot(pa)
install.packages(sp)
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
system.file("shape/nc.shp", package="sf")
system.file("shape/pa.shp", package="sf")
RPostgres::Postgres()
install.packages("RPostgres")
RPostgres::Postgres()
pa <- tigris::counties(state = "PA", class = "sf")
st_write(pa, PqDriver, layer = NULL)
library(shiny)
library(ggplot2)
library(dplyr)
library(flexdashboard)
library(tools)
library(plotly)
library(scales)
library(reshape)
library(tidyverse)
library(leaflet)
library(rgdal)    # for readOGR and others
library(sp)       # for spatial objects
library(tigris)
library(censusapi)
library(rgeos)
library(GISTools)
library(maptools)
options(tigris_use_cache = TRUE)
st_write(pa, PqDriver, layer = NULL)
sids <- readShapePoly(system.file("./tl_2020_01_county10.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
sids <- st_read(system.file("./tl_2020_01_county10.shp", package="sf"))
install.packages("st_read")
install.packages("sf")
install.packages("sf")
sids <- st_read(system.file("./tl_2020_01_county10.shp", package="sf"))
library(sf)
sids <- st_read(system.file("./tl_2020_01_county10.shp", package="sf"))
sids <- st_read(system.file("./tl_2020_01_county10.shp", package="sf"))
counties <- geojson_read("https://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_050_00_500k.json", what = "sp")
library(broom)
library(geojsonio)
install.packages("geojsonio")
library(broom)
library(geojsonio)
counties <- geojson_read("https://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_050_00_500k.json", what = "sp")
counties
class(counties)
sids <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
class(sids)
class(sids)
writeSpatialShape(sids, "sids")
writeOGR(sids, "sids")
plot(sids)
writeSpatialShape(sids, "sids")
cents <- coordinates(sids)
cents <- SpatialPointsDataFrame(coords=cents, data=sids@data,
proj4string=CRS("+proj=longlat +ellps=clrk66"))
writeSpatialShape(counties, "counties")
rgdal::writeOGR(counties, "counties")
rgdal::writeOGR(counties, "counties", "ESRI Shapefile")
rgdal::writeOGR(counties, "counties", driver = "ESRI Shapefile")
rgdal::writeOGR(counties, layer = "counties", driver = "ESRI Shapefile")
rgdal::writeOGR(dsn = counties, layer = "counties", driver = "ESRI Shapefile")
lower48 <- counties[(counties@data$STATE != '02' & counties@data$STATE != '15') ,]
lower48
shape <- tigris::counties(state = input$selected_state, class = "sf")
shape <- tigris::counties(state = "pa", class = "sf")
View(shape)
counties <- geojson_read("https://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_050_00_500k.json", what = "sp")
shape <- reactive({counties[(counties@data$STATE == '12') ,]})
View(shape <- reactive({counties[(counties@data$STATE == '12') ,]}))
View(shape)
xxx <- reactive({counties[(counties@data$STATE == '12') ,]})
View(xxx)
xxx <- counties[(counties@data$STATE == '12') ,]
yyy <- tidy(xxx)
View(yyy)
View(shape)
shape <- tigris::counties(state = input$selected_state, class = "sf")
shape <- tigris::counties(state = "pa, class = "sf")
shape <- tigris::counties(state = "pa", class = "sf")
View(shape)
xxx@data$myFIPS <- substr(as.character(xxx8@data$GEO_ID),1,5)
xxx@data$myFIPS <- substr(as.character(xxx@data$GEO_ID),1,5)
yyy <- tidy(xxx)
View(yyy)
counties <- geojson_read("https://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_050_00_500k.json", what = "sp")
xxx <- counties[(counties@data$STATE == '12') ,]
xxx@data$myFIPS <- substr(as.character(xxx@data$GEO_ID),1,5)
yyy <- tidy(xxx, region = "myFIPS")
View(yyy)
names(yyy)
centers <- st_centroid(state_value)
pa <- tigris::counties(state = "pa", class = "sf")
st_centroid(pa)
center <- st_centroid(pa)
View(center)
ggplot() +
geom_sf(data = pa, fill = "white") +
geom_sf(data = center, aes(size = AWATER), shape = 21,
fill = "lightblue", alpha = 0.7, show.legend = "point") +
scale_size_continuous(range = c(1, 20))
ggplot() +
geom_sf(data = pa, fill = "white") +
geom_sf(data = center, shape = 2,
fill = "lightblue", alpha = 0.7, show.legend = "point") +
scale_size_continuous(range = c(1, 20))
sahie_counties <- getCensus(
name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "county:*",
regionin = "state:01,02",
time = 2018)
head(sahie_counties, n=12L)
sahie_counties <- getCensus(
name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "county:*",
regionin = "state:01,02",
time = 2018)
Sys.setenv(CENSUS_KEY="815f420d7978fe1866f81df31947126f9e1cc460")
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
sahie_counties <- getCensus(
name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "county:*",
regionin = "state:01,02",
time = 2018)
# Add key to .Renviron
Sys.setenv(CENSUS_KEY="815f420d7978fe1866f81df31947126f9e1cc460")
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
sahie_counties <- getCensus(
name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "county:*",
regionin = "state:PA",
time = 2018)
runApp('D:/Spring_2021/RShiny/HW1/hw1-ckallaya/hw1-ckallaya.R')
runApp('D:/Spring_2021/RShiny/HW1/hw1-ckallaya/hw1-ckallaya.R')
